# Vibe - Dating App Project Context for LLM Agents

## Project Overview
Vibe is a Hinge-inspired dating app MVP built with Go backend and Vue.js frontend. The project aims to implement the core features of a dating app including user authentication, profile management, matching, and messaging.

## Hackathon Context
This project is being built for the VibeCoding Hackathon (May 14, 2025, 4:00-8:00 PM). We are currently past the first hour of the 4-hour time limit. The challenge is to clone an existing product (Hinge in our case) with a focus on functionality, user interface, and speed of execution.

### Hackathon Requirements
- 4-hour time limit
- Submission needs: GitHub repo, README.md, 5-minute demo video
- Judging based on resemblance to original product and implementation efficiency

### Current Progress
- Repository setup with Go backend and Vue frontend
- Database integration with Render PostgreSQL
- Basic project structure and environment configuration complete
- Authentication framework in place

### Remaining Priorities
1. Complete profile features
2. Implement discovery/swiping
3. Build matching system
4. Add basic messaging if time permits
5. Polish UI/UX and prepare submission

## Tech Stack
- **Backend**: Go with Gorilla Mux, PostgreSQL database
- **Frontend**: Vue 3, Vue Router, Pinia, Vite
- **Authentication & Storage**: Supabase
- **Deployment**: Render (API + PostgreSQL)

## Project Structure
- `/backend` - Go API server
  - `/cmd/api` - Main application entry point
  - `/cmd/migrate` - Database migration utilities
  - `/internal/handlers` - API request handlers
  - `/internal/models` - Data models
  - `/internal/db` - Database access
  - `/internal/middleware` - HTTP middleware
  - `/migrations/postgres` - Database migration files
  - `/configs` - Configuration files
  
- `/frontend` - Vue.js application
  - `/src/views` - Vue pages
  - `/src/components` - Reusable Vue components
  - `/src/stores` - Pinia state stores
  - `/src/services` - API services
  - `/src/router` - Vue Router configuration
  - `/src/assets` - Static assets

## Key Features Implemented
- User authentication (login/register)
- Basic routing setup
- Database schema and migrations
- Environment configuration
- Integration with Render PostgreSQL database

## Planned Features
- User profile creation and editing
- Discovery/swiping system
- Matching algorithm
- In-app messaging
- User preferences
- Profile photos

## Database Schema
- **users**: User authentication info
- **profiles**: User profile details
- **photos**: User profile photos
- **matches**: Matched users
- **swipes**: Record of swipes between users
- **messages**: Messages between users
- **user_preferences**: User matching preferences

## Development Workflow
1. Use the Makefile for common tasks:
   - `make setup` - Initial project setup
   - `make start` - Start development servers
   - `make migrate-up` - Run database migrations
   - `make setup-env` - Set up environment with Render PostgreSQL credentials
   
2. API structure:
   - All routes are under `/api/v1/` prefix
   - Authentication routes: `/api/v1/auth/*`
   - Profile routes: `/api/v1/profiles/*`
   - Matching routes: `/api/v1/matches/*`
   - Messaging routes: `/api/v1/messages/*`

## Supabase Integration
The project uses Supabase for:
- User authentication (with JWT)
- Photo storage

## Integration Notes
When extending this project, keep in mind:
1. Authentication flow uses JWT tokens stored in localStorage
2. API requests should include Authorization header with the token
3. Frontend routes with `requiresAuth: true` are protected
4. Database queries use SQL with the standard database/sql package
5. Vue components follow the Composition API pattern
6. The project uses a Render-hosted PostgreSQL database
7. Database connection can be configured via full URL or individual params

## Testing Strategy
- Backend: Go's testing package for unit tests
- Frontend: Vitest for component testing

## Cursor Development Guidelines
When using Cursor with this project, follow these guidelines:
1. **Keep it simple** - Don't overengineer solutions or add unnecessary complexity
2. **Reuse existing components** - Check for existing components, utilities, or patterns before creating new ones
3. **Preserve functionality** - Do not remove or significantly alter existing functionality without confirming with users
4. **Be consistent** - Follow the established patterns and conventions in the codebase
5. **Document your changes** - Add clear comments for complex logic and keep documentation updated
6. **Incremental changes** - Make smaller, focused changes rather than large overhauls
7. **Consider performance** - Pay attention to potential performance impacts of your changes
8. **Mobile-first approach** - Ensure all UI changes work well on mobile devices
9. **Keep this context file updated** - When making significant changes to the project, update this file accordingly
10. **External asset attribution** - External assets should be credited in code comments, but these credits should not appear in UI or API responses

## Maintaining This Context File
This context file should be regularly updated to reflect the current state of the project. When making significant changes, please:

1. **Add new features** - Document any new features or endpoints added to the project
2. **Update tech stack** - If new technologies or libraries are introduced
3. **Document API changes** - If APIs are changed or extended
4. **Update workflow processes** - If development workflows change
5. **Note configuration changes** - If configuration or environment setups are modified
6. **Update database schema** - If there are changes to the database structure

This ensures that all developers and AI assistants have accurate context about the project.

## AI Agent Integration Opportunities
- Improved matching algorithms based on profile data
- Conversation starters generation
- Profile improvement suggestions
- Content moderation for photos and messages
- Activity analysis and insights 