# Vibe - Dating App Project Context for LLM Agents

## Project Overview
Vibe is a Hinge-inspired dating app MVP built with Go backend and Vue.js frontend. The project aims to implement the core features of a dating app including user authentication, profile management, matching, and messaging.

## Hackathon Context
This project is being built for the VibeCoding Hackathon (May 14, 2025, 4:00-8:00 PM). We are currently in the latter half of the 4-hour time limit. The challenge is to clone an existing product (Hinge in our case) with a focus on functionality, user interface, and speed of execution.

### Hackathon Requirements
- 4-hour time limit
- Submission needs: GitHub repo, README.md, 5-minute demo video
- Judging based on resemblance to original product and implementation efficiency

### Current Progress
- Repository setup with Go backend and Vue frontend
- Database integration with Render PostgreSQL
- Full implementation of core backend services:
  - Profile service with prompts and photos
  - Feed service for discovery
  - Match service for swipes and matches
  - Message service for chat functionality
  - Notification service with Server-Sent Events (SSE)
  - Preference service for user dating preferences
- HTTP utility functions for API response handling
- Data models for profiles, matches, messages, preferences, prompts, etc.
- Database migrations (with some issues to fix)

### Remaining Priorities
1. Fix database migration issues (type mismatch between profiles.id and foreign keys)
2. Complete API handlers for routes
3. Implement frontend UI components
4. Connect frontend to backend API
5. Polish UI/UX and prepare submission

## Tech Stack
- **Backend**: Go with Gorilla Mux, PostgreSQL database
- **Frontend**: Vue 3, Vue Router, Pinia, Vite
- **Authentication & Storage**: Supabase
- **Deployment**: Render (API + PostgreSQL)
- **Real-time**: Server-Sent Events (SSE) for notifications and messages

## Project Structure
- `/backend` - Go API server
  - `/cmd/api` - Main application entry point
  - `/cmd/migrate` - Database migration utilities
  - `/internal/handlers` - API request handlers
  - `/internal/models` - Data models
  - `/internal/services` - Business logic services
  - `/internal/utils` - Utility functions
  - `/migrations/postgres` - Database migration files
  
- `/frontend` - Vue.js application
  - `/src/views` - Vue pages
  - `/src/components` - Reusable Vue components
  - `/src/stores` - Pinia state stores
  - `/src/services` - API services
  - `/src/router` - Vue Router configuration
  - `/src/assets` - Static assets

## Backend Architecture
The backend follows a layered architecture:
- **Handlers**: Process HTTP requests, validate inputs, and call services
- **Services**: Implement business logic and interact with the database
- **Models**: Define data structures for the application
- **Utils**: Provide helper functions for common tasks

Key services implemented:
1. **BaseService**: Provides common database functionality for all services
2. **ProfileService**: Manages user profiles, photos, and prompts
3. **FeedService**: Handles the discovery feed and standout profiles
4. **MatchService**: Manages swiping, matching, and conversations
5. **MessageService**: Handles sending and retrieving messages
6. **NotificationService**: Manages real-time notifications via SSE
7. **PreferenceService**: Handles user dating preferences
8. **PromptService**: Manages prompt templates and user responses

## Key Features Implemented
- User authentication (login/register)
- Profile creation and editing with photos and prompts
- Discovery feed with filtering based on preferences
- Swiping mechanism with match detection
- Messaging between matched users
- Real-time notifications
- User preferences for dating filters
- Standout profiles for premium features

## Database Schema
- **users**: User authentication info (id UUID, email, password_hash, etc.)
- **profiles**: User profile details (id BIGINT, user_id UUID, name, bio, date_of_birth, gender, location, occupation, vices)
- **photos**: User profile photos (id, profile_id, url, is_primary)
- **prompts**: Prompt templates (id, text)
- **profile_prompts**: User prompt responses (id, profile_id, prompt_id, answer)
- **preferences**: User matching preferences (id, user_id, preferred_gender, min_age, max_age, max_distance)
- **swipes**: Record of swipes (id, user_id, profile_id, is_like, message, is_rose)
- **matches**: Matched users (id, user1_id, user2_id, created_at, last_message_at, user1_last_read, user2_last_read)
- **messages**: Messages between users (id, match_id, sender_id, message, is_read)
- **standouts**: Standout profile recommendations (id, user_id, profile_id, created_at, expires_at, is_active)
- **notifications**: User notifications (id, user_id, type, target_id, message, is_read)

**Note:** There is a mismatch between data types in the database schema. The profiles table uses UUID for the ID, but foreign keys are defined as BIGINT. This needs to be fixed in the migrations.

## API Endpoints

### Authentication
- `POST /api/v1/auth/register`: Register a new user
- `POST /api/v1/auth/login`: Login user

### Profiles
- `GET /api/v1/profiles/{id}`: Get a profile by ID
- `PUT /api/v1/profiles/{id}`: Update a profile
- `GET /api/v1/profiles/{id}/prompts`: Get profile prompts
- `PUT /api/v1/profiles/{id}/prompts`: Update profile prompts

### Feed and Discovery
- `GET /api/v1/feed`: Get main feed profiles
- `GET /api/v1/standouts`: Get standout profiles

### Matching
- `POST /api/v1/swipes`: Create a swipe (like or pass)
- `GET /api/v1/matches`: Get all matches
- `GET /api/v1/matches/{id}`: Get a specific match
- `POST /api/v1/matches/{id}/read`: Mark match as read

### Messaging
- `GET /api/v1/matches/{id}/messages`: Get messages for a match
- `POST /api/v1/matches/{id}/messages`: Send a message
- `PUT /api/v1/messages/{id}/read`: Mark message as read

### Preferences
- `GET /api/v1/preferences`: Get user preferences
- `PUT /api/v1/preferences`: Update user preferences

### Notifications
- `GET /api/v1/notifications`: Get notifications
- `PUT /api/v1/notifications/{id}/read`: Mark notification as read
- `GET /api/v1/events`: Stream events (SSE)

## Development Workflow
1. Use the Makefile for common tasks:
   - `make setup` - Initial project setup
   - `make start` - Start development servers
   - `make migrate-up` - Run database migrations
   - `make setup-env` - Set up environment with Render PostgreSQL credentials

## Known Issues
1. Migration error: There's a type mismatch in the database schema. The profiles.id column is UUID but foreign keys referencing it are defined as BIGINT.
2. Some handler implementations may need updating to match the service layer implementations.
3. Frontend components need to be implemented to connect with the backend API.

## Next Steps
1. Fix the migration script by ensuring consistent data types across tables
2. Complete the implementation of API handlers
3. Build the frontend UI components
4. Connect the frontend to the backend API
5. Test the full application flow

## AI Agent Integration Opportunities
- Improved matching algorithms based on profile data
- Conversation starters generation
- Profile improvement suggestions
- Content moderation for photos and messages
- Activity analysis and insights 